%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% @theory: helloworld
% @author: pmasci
% @date: Wed, 23 Sep 2020 16:21:52 GMT
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
helloworld: THEORY
  BEGIN

    % utility function, computes the absolute value of a number
    abs (x: real): real = IF x > 0 THEN x ELSE -x ENDIF

    always_positive: THEOREM
      FORALL (x: real): abs(x) >= 0

    always_negative: THEOREM
      FORALL (x: negreal): x < 0

    foo: LEMMA
      true

    % Computes the square root of a non-negative real number
    % by recursively applying Newton's method n times
    sqrt_newton(a: nnreal, n: nat): RECURSIVE posreal =
      IF n = 0 THEN a + 1
      ELSE LET r = sqrt_newton(a, n - 1) 
            IN (1/2) * (r + a/r)
      ENDIF
    MEASURE n + 1

    % sqrt upper bound
    sqrt_ub(a: nnreal): posreal = sqrt_newton(a, 10)

    % sqrt lower bound
    sqrt_lb(a: nnreal): nnreal = a / sqrt_newton(a, 10)

    sqrt2: LEMMA
      sqrt_lb(2) < sqrt_ub(2)

    sqrt_lb2: LEMMA
      2/3 <= 1 / sqrt_lb(2)

    dummy: LEMMA 1 = 0

    % utility function, returns a list with the output of sqrt_newton
    % the i-th element of the list is the output produced by sqrt_newton at iteration i
    plot_newton(a: nnreal, n: posnat): RECURSIVE list[real] =
			IF n <= 1 THEN (: sqrt_newton(a, n) :)
			ELSE plot_newton(a, n - 1) o (: sqrt_newton(a, n) :) ENDIF
    MEASURE n

		% this expression can be rendered using the plot functionality provided by vscode-pvs
		plot_sqrt2: list[real] = plot_newton(2, 5)

    %--------------------------------------------
    %% First example plots a list of ordered pairs
    %  as a scatter plot
    %--------------------------------------------
    scatterplot: list[[real, real]] = (: (1/2, 2), (2, -1), (3, -2/3) :)

    %--------------------------------------------
    %% Second example plots a data series
    %  as a linear plot
    %--------------------------------------------
    series1: list[real] = (: 1, -1 , -2/3 :)

    %--------------------------------------------
    %% Third example of wanting to plot a tuple of
    %  two lists: the first one represents the
    %  horizontal coordinates, the second list
    %  represents the vertical coordinates
    %--------------------------------------------
    series2: [ list[real], list[real] ] = ((: 1/2, 2, 3 :), (: 1, -1, -2/3 :))

    %--------------------------------------------
    %% Fourth example, plots a tuple of
    %  four lists: the first one represents the
    %  horizontal coordinates, the second and third
    %  represent the vertical coordinates of two
    %  different series
    %--------------------------------------------
    multiseries: [ list[real], list[real], list[real], list[real] ] = (
      (: 1/2 , 2 , 3 :),  % x datapoints
      (: 1, -1 , -2/3 :), % y1 datapoints
      (: 0, -4.1 , -3 :), % y2 datapoints
      (: 5, 1 , -2 :)  % y3 datapoints
    )

    %--------------------------------------------
    %% Fourth example, plots a tuple of pairs of lists
    %  each tuple is a different dataseries with its x and y coordinates
    %--------------------------------------------
    multiseries_2: [
      [list[real], list[real]], 
      [list[real], list[real]], 
      [list[real], list[real]]
    ] = (
      ((: 0, 1, 2 :), (: 0, 1, 1.5 :)), % x,y values for series 1
      ((: 0, 2, 4 :), (: 0, 1, 1.5 :)), % x,y values for series 2
      ((: 0, 3, 6 :), (: 0, 1, 1.5 :))  % x,y values for series 3
    )

  END helloworld