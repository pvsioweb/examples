(helloworld
 (always_positive 0
  (always_positive-1 nil 3809866971
   ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs const-decl "real" helloworld nil))
   shostak))
 (always_negative 0
  (always_negative-1 nil 3827321151 ("" (grind) nil nil) nil shostak))
 (foo 0 (foo-1 nil 3809944245 ("" (propax) nil nil) nil shostak))
 (sqrt_newton_TCC1 0
  (sqrt_newton_TCC1-1 nil 3810216203
   ("" (skosimp*) (("" (subtype-tcc) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (sqrt_newton subtype "(number_fields.-)(helloworld.n, 1)" "nat")))
 (sqrt_newton_TCC2 0
  (sqrt_newton_TCC2-1 nil 3810216203
   ("" (skosimp*) (("" (termination-tcc) nil nil)) nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (sqrt_newton termination
    "helloworld.sqrt_newton(helloworld.a, (number_fields.-)(helloworld.n, 1))"
    "nil")))
 (sqrt2 0
  (sqrt2-1 nil 3810221097 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (sqrt_lb2_TCC1 0
  (sqrt_lb2_TCC1-1 nil 3810221097 ("" (subtype-tcc) nil nil)
   ((sqrt_lb const-decl "nnreal" helloworld nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil (sqrt_lb2 subtype "helloworld.sqrt_lb(2)" "nznum")))
 (sqrt_lb2 0
  (sqrt_lb2-1 nil 3810221431
   ("" (eval-expr "sqrt_lb(2)") (("" (assert) nil nil)) nil)
   ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (sqrt_lb const-decl "nnreal" helloworld nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (dummy 0
  (dummy-1 nil 3827321152
   ("" (comment "this lemma is false")
    (("" (case "1 > 0")
      (("1" (comment "this branch is true")
        (("1" (case "2 > 0")
          (("1" (comment "this branch is true")
            (("1" (assert) (("1" (postpone) nil nil))
              ";;; this branch is true"))
            nil)
           ("2" (postpone) nil nil))
          ";;; this branch is true"))
        nil)
       ("2" (postpone) nil nil))
      ";;; this lemma is false"))
    nil)
   nil shostak))
 (plot_newton_TCC1 0
  (plot_newton_TCC1-1 nil 3830636145 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (plot_newton subtype "(number_fields.-)(helloworld.n, 1)"
    "posnat")))
 (plot_newton_TCC2 0
  (plot_newton_TCC2-1 nil 3830636145 ("" (termination-tcc) nil nil) nil
   nil
   (plot_newton termination
    "helloworld.plot_newton(helloworld.a, (number_fields.-)(helloworld.n, 1))"
    "nil"))))

